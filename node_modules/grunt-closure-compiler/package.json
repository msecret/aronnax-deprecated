{
  "name": "grunt-closure-compiler",
  "description": "A Grunt task for Closure Compiler.",
  "version": "0.0.13",
  "homepage": "https://github.com/gmarty/grunt-closure-compiler",
  "author": {
    "name": "Guillaume Marty",
    "email": "edo999@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/gmarty/grunt-closure-compiler.git"
  },
  "bugs": {
    "url": "https://github.com/gmarty/grunt-closure-compiler/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/gmarty/grunt-closure-compiler/blob/master/LICENSE-MIT"
    }
  ],
  "main": "grunt.js",
  "bin": {
    "grunt-closure-compiler": "bin/grunt-closure-compiler"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "grunt": "~0.3.7"
  },
  "devDependencies": {
    "grunt": "~0.3.7"
  },
  "keywords": [
    "Closure Compiler",
    "Minification",
    "Performance",
    "gruntplugin"
  ],
  "readme": "# grunt-closure-compiler\n\nA Grunt task for [Closure Compiler](https://developers.google.com/closure/compiler/).\n\n## Getting Started\n\nFirst you need to download a [build of Closure Compiler](http://code.google.com/p/closure-compiler/downloads/list) or build it [from the source](http://code.google.com/p/closure-compiler/source/checkout) (see [details below](#closure-compiler-installation-from-source)).\n\nOptionally, you can set up an environment variable called `CLOSURE_PATH` that points to your Closure Compiler dir (see [details below](#set-up-the-environment-variable)).\n\nInstall this module on your project's [grunt.js gruntfile](https://github.com/cowboy/grunt/blob/master/docs/getting_started.md):\n```bash\n$ npm install grunt-closure-compiler\n```\n\nThen register the task by adding the following line to your `grunt.js` gruntfile:\n```javascript\ngrunt.loadNpmTasks('grunt-closure-compiler');\n```\n\nThen you can minify JavaScript calling:\n```javascript\ngrunt.initConfig({\n  'closure-compiler': {\n    frontend: {\n      closurePath: '/src/to/closure-compiler',\n      js: 'static/src/frontend.js',\n      jsOutputFile: 'static/js/frontend.min.js',\n      maxBuffer: 500\n      options: {\n        compilation_level: 'ADVANCED_OPTIMIZATIONS',\n        language_in: 'ECMASCRIPT5_STRICT'\n      }\n    }\n  }\n});\n```\n\n`closurePath` is required if you choose not to set up the `CLOSURE_PATH` environment variable. In this case, it should point to the install dir of Closure Compiler (not the subdirectory where the `compiler.jar` file is located).\n\n`js` property is always required.\n\nIf `jsOutputFile` property is set, the script will be minified and saved to the file specified. Otherwise it will be output to the command line.\n\n`maxBuffer` property\n\nIf the buffer returned by closure compiler is more than 200kb, you will get an error saying \"maxBuffer exceeded\". To prevent this, you can set the maxBuffer to the preffered size you want (in kb)\n\n\nOptionally, several parameters can be passed to `options` object.\n\n## Documentation\n\n### Closure Compiler installation from source\n\nInstall dependencies:\n```bash\n$ sudo apt-get install svn ant openjdk-6-jdk\n```\n\nThen checkout the source from SVN and build:\n```bash\n$ svn checkout http://closure-compiler.googlecode.com/svn/trunk/ closure-compiler\n$ cd closure-compiler\n$ ant\n```\n\nTo refresh your build, simply call:\n```bash\n$ svn up\n$ ant clean\n$ ant\n```\n\n#### Mac\n\nMac users can install it from brew:\n```bash\n$ brew install closure-compiler\n```\n\n### Set up the environment variable\n\nSetting up a `CLOSURE_PATH` environment variable is preferred because:\n\n* You don't have to specify the `closurePath` each time.\n* It makes it easy to use contributed externs.\n\nIn case you're wondering, Closure Compiler utilizes continuous integration, so it's unlikely to break.\n\nIf you create the `CLOSURE_PATH` environment variable, make sure to have it pointing to the `closure-compiler` dir created earlier (and not to the `build` subdirectory where the jar is located).\n\n#### Mac\n\nOn Mac, when installed with brew, you can get the install path using:\n```bash\n$ brew --prefix closure-compiler\n/usr/local/Cellar/closure-compiler/20120710\n```\n\nJust append `/libexec` to what you get. In this example, you should use the following path:\n```\n/usr/local/Cellar/closure-compiler/20120710/libexec/\n```\n\n### `js` property\n\nThis task is a [multi task](https://github.com/cowboy/grunt/blob/master/docs/types_of_tasks.md), you can specify several targets. The task can minify many scripts at a time.\n\n`js` can be an array if you need to concatenate several files to a target.\n\nYou can use Grunt `<config:...>` or `*` based syntax to have the file list expanded:\n```javascript\ngrunt.initConfig({\n  'closure-compiler': {\n    frontend: {\n      js: 'static/src/frontend.js',\n      jsOutputFile: 'static/js/frontend.min.js',\n    },\n    frontend_debug: {\n      js: [\n        '<config:closure-compiler.frontend.js>',\n        // Will expand to 'static/src/frontend.js'\n        'static/src/debug.*.js'\n        // Will expand to 'static/src/debug.api.js',\n        //   'static/src/debug.console.js'...\n      ],\n      jsOutputFile: 'static/js/frontend.debug.js',\n      options: {\n        debug: true,\n        formatting: 'PRETTY_PRINT'\n      }\n    },\n  }\n});\n```\n\n### `options` properties\n\nProperties in `options` are mapped to Closure Compiler command line. Just pass options as a map of option-value.\n\nIf you need to pass the same options several times, make it an array. See `define` below:\n```javascript\ngrunt.initConfig({\n  'closure-compiler': {\n    frontend: {\n      js: 'static/src/frontend.js',\n      jsOutputFile: 'static/js/frontend.min.js',\n      options: {\n        compilation_level: 'ADVANCED_OPTIMIZATIONS',\n        language_in: 'ECMASCRIPT5_STRICT',\n        define: [\n          '\"DEBUG=false\"',\n          '\"UI_DELAY=500\"'\n        ],\n      }\n    }\n  }\n});\n```\n\nWhen defining externs, if you added the `CLOSURE_PATH` environment variable you can easily reference Closure Compiler builtin externs using `<%= process.env.CLOSURE_PATH %>` Grunt template:\n```javascript\ngrunt.initConfig({\n  'closure-compiler': {\n    frontend: {\n      js: 'static/src/frontend.js',\n      jsOutputFile: 'static/js/frontend.min.js',\n      options: {\n        externs: '<%= process.env.CLOSURE_PATH %>/contrib/externs/jquery-1.7.js',\n      }\n    }\n  }\n});\n```\n\nOtherwise, use the `<config>` Grunt template:\n```javascript\ngrunt.initConfig({\n  'closure-compiler': {\n    frontend: {\n      closurePath: '/src/to/closure-compiler',\n      js: 'static/src/frontend.js',\n      jsOutputFile: 'static/js/frontend.min.js',\n      options: {\n        externs: '<config:closure-compiler.frontend.closurePath>/contrib/externs/jquery-1.7.js'\n      }\n    }\n  }\n});\n```\n\nTo specify boolean options (such as `process_common_js_modules`, i.e. no value are required), set its value to `undefined` (or `null`):\n```javascript\ngrunt.initConfig({\n  'closure-compiler': {\n    frontend: {\n      js: 'static/src/frontend.js',\n      jsOutputFile: 'static/js/frontend.min.js',\n      options: {\n        process_common_js_modules: undefined,\n        common_js_entry_module: 'exports'\n      }\n    }\n  }\n});\n```\n\n\n## Note\n\ngrunt-closure-compiler development was founded by [Dijiwan](http://www.dijiwan.com/). Our team uses it on a daily basis to minify our frontend JavaScript.\n\nThe directory structure was inspired by [grunt-less](https://github.com/jharding/grunt-less), a Grunt task for Less.\n\n## License\n\nCopyright (c) 2012 Guillaume Marty\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-closure-compiler@0.0.13",
  "dist": {
    "shasum": "21cd2f5da57e183fc61edaf13e5b3ffec387bb4f"
  },
  "_from": "grunt-closure-compiler"
}
